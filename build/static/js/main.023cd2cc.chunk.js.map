{"version":3,"sources":["components/SearchBox.tsx","components/Map.tsx","components/Form.tsx","components/Filter.tsx","components/axios.tsx","components/Marker.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBox","props","React","useState","myLoc","setMyLoc","handleLatLng","address","a","geocodeByAddress","results","getLatLng","latLong","console","log","lat","lng","setLocation","value","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description","defaultProps","center","zoom","Map","memo","events","forEach","element","location","mapsApiLoaded","mapInstance","mapsapi","state","setState","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","height","width","PropTypes","string","onPlacesChanged","func","bootstrapURLKeys","key","language","libraries","defaultCenter","defaultZoom","options","maps","disableDefaultUI","mapTypeControl","streetViewControl","styles","featureType","elementType","stylers","visibility","onClick","obj","setCordinates","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","apiLoaded","markers","type","src","Form","setForm","form","handleTypeOfEvent","event","target","typeOfEvent","handleFeederName","feederName","handleFeederPhone","feederPhone","handleSterlized","sterlizedCats","handleUnsterlized","unsterlizedCats","onSubmit","handleSubmit","TextField","date","id","label","defaultValue","InputLabelProps","shrink","InputLabel","htmlFor","Input","inputProps","nameOfPerson","test","phone","NativeSelect","animal","min","numOfAnimals","eventsForAnimals","addedForCats","Button","variant","setShow","color","endIcon","Icon","Filter","animalFilter","setAnimalFilter","setEventFilter","setStartDateFilter","startDateFilter","setEndDateFilter","endDateFilter","setUseFilter","undefined","url","axios","get","then","response","data","post","Marker","name","title","App","Date","show","setMarkers","cordinates","eventFilter","useFilter","getColorByAnimalType","AnimalType","useEffect","service","forms","preventDefault","concat","catch","error","toShow","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.023cd2cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng,\r\n  } from 'react-places-autocomplete';\r\n\r\ninterface IProps  {\r\n    map: any\r\n    mapsapi: any\r\n    placeholder: any,\r\n    onPlacesChanged: any\r\n    location: {\r\n        address:any\r\n        lat: any\r\n        lng: any\r\n      }\r\n      setLocation: any\r\n      myLoc:any\r\n      setMyLoc:any\r\n  }\r\n\r\nconst SearchBox = (props:any) =>{\r\nconst [myLoc, setMyLoc] = React.useState(\"\")\r\n    // const onPlacesChanged = () => {\r\n  //   props.onPlacesChanged(props.map.getPlaces());\r\n  // }\r\n// return <input placeholder={props.placeholder} type=\"text\"/>\r\n    //return (<input ref=\"input\"{...props} type=\"text\"/>);\r\n\r\n    \r\n    const handleAddress = (address:string) => {\r\n      console.log(address)\r\n      setMyLoc(address)\r\n    }\r\n  \r\n    const handleLatLng = async (address: string) => {\r\n      setMyLoc(address)\r\n      const results = await geocodeByAddress(address);\r\n      const latLong = await getLatLng(results[0]);\r\n      console.log(latLong.lat, latLong.lng  )\r\n      props.setLocation({address:myLoc, lat:latLong.lat, lng: latLong.lng})\r\n    } \r\n\r\n    return (\r\n      <div>\r\n                  <PlacesAutocomplete\r\n                  value={myLoc}\r\n                  onChange={handleAddress}\r\n                  onSelect={handleLatLng}\r\n                  >\r\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                  <div>\r\n                  <input\r\n                    {...getInputProps({\r\n                      placeholder: 'Search Places ...',\r\n                      className: 'location-search-input',\r\n                    })}\r\n                  />\r\n                  <div className=\"autocomplete-dropdown-container\">\r\n                    {loading && <div>Loading...</div>}\r\n                    {suggestions.map(suggestion => {\r\n                      const className = suggestion.active\r\n                        ? 'suggestion-item--active'\r\n                        : 'suggestion-item';\r\n                      // inline style for demonstration purpose\r\n                      const style = suggestion.active\r\n                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                      return (\r\n                        <div\r\n                          {...getSuggestionItemProps(suggestion, {\r\n                            className,\r\n                            style,\r\n                          })}\r\n                        >\r\n                          <span>{suggestion.description}</span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n            )}\r\n          </PlacesAutocomplete>\r\n                \r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\nexport default SearchBox;\r\n\r\n// export default class SearchBox extends React.Component {\r\n//   static propTypes = {\r\n//     placeholder: React.PropTypes.string,\r\n//     onPlacesChanged: React.PropTypes.func\r\n//   }\r\n//   render() {\r\n//     return <input ref=\"input\" {...this.props} type=\"text\"/>;\r\n//   }\r\n//   onPlacesChanged = () => {\r\n//     if (this.props.onPlacesChanged) {\r\n//       this.props.onPlacesChanged(this.searchBox.getPlaces());\r\n//     }\r\n//   }\r\n//   componentDidMount() {\r\n//     var input = React.findDOMNode(this.refs.input);\r\n//     this.searchBox = new google.maps.places.SearchBox(input);\r\n//     this.searchBox.addListener('places_changed', this.onPlacesChanged);\r\n//   }\r\n//   componentWillUnmount() {\r\n//     this.searchBox.removeListener('places_changed', this.onPlacesChanged);\r\n//   }\r\n// }","import React, { useState } from \"react\";\r\nimport GoogleMap from 'google-map-react';\r\nimport { EventTypes } from '../EventTypes';\r\n\r\nimport Popup from 'reactjs-popup';\r\nimport 'reactjs-popup/dist/index.css';\r\nimport { Event } from './Event'\r\nimport { isUndefined } from \"util\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport PropTypes from 'prop-types';\r\nimport Marker from \"./Marker\";\r\nimport { AnyARecord } from \"dns\";\r\n\r\n\r\ninterface IProps  {\r\n  events: any[]\r\n  toShow: any\r\n  markers: any[]\r\n  setMarkers: any\r\n  setCordinates: any\r\n  useFilter: boolean \r\n  animalFilter: string\r\n  eventFilter: string\r\n  startDateFilter: Date|undefined\r\n  endDateFilter: Date|undefined\r\n}\r\n\r\n\r\n\r\nconst API_KEY = 'AIzaSyAmu9nol12It2xvWk00g4NwocROPL2rFZs';\r\n\r\n\r\nconst defaultProps = {\r\n    center: { lat: 32.06, lng: 34.82 },\r\n    zoom: 13.54\r\n}\r\n\r\n// const getColorByAnimalType = (AnimalType: string) => {\r\n//   switch (AnimalType) {\r\n//     case \"Cat\":\r\n//       return 'yellow';\r\n//     case \"Dog\":\r\n//       return 'blue';\r\n//     case \"Fox\":\r\n//       return 'red';\r\n//     case \"Jackal\":  \r\n//       return 'green';\r\n//   }\r\n// }\r\n\r\n\r\n\r\nexport const Map = React.memo<IProps>((props) => {\r\n\r\n    const _onClick = (obj: any) => {\r\n    console.log(obj.lat, obj.lng)\r\n    let lat = obj.lat\r\n    let lng = obj.lng\r\n    //props.setMarkers(props.markers.concat(<Event lat= {lat} lng = {lng} text={\"omer\"}/>))\r\n    props.setCordinates({lat: obj.lat, lng: obj.lng})\r\n    //props.toShow(true);\r\n    \r\n  }\r\n  \r\n  props.events.forEach(element => {\r\n      \r\n    });  \r\n    \r\n    \r\n\r\n  const [location, setLocation] =  React.useState({address:\"דרך מצדה 6, באר שבע, ישראל\",\r\n  lat: 31.2591166,\r\n  lng: 34.7955966})\r\n  \r\n    const [state, setState] = React.useState( {\r\n      mapsApiLoaded: false,\r\n      mapInstance: null,\r\n      mapsapi: null,\r\n    })\r\n    const markers: any = [\"\"];\r\n    props.events.forEach(element => {\r\n      \r\n    });  \r\n  const apiLoaded= (map:any, maps:any) => {\r\n    setState({\r\n      mapsApiLoaded: true,\r\n      mapInstance: map,\r\n      mapsapi: maps,\r\n    });\r\n  }\r\n  const getMapOptions = (maps: any) => {\r\n    return {\r\n      disableDefaultUI: true,\r\n      mapTypeControl: true,\r\n      streetViewControl: true,\r\n      styles: [{ featureType: 'poi', elementType: 'labels', stylers: [{ visibility: 'on' }] }],\r\n    };\r\n  };\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition((position:any) => {\r\n      setLocation({\r\n        address:\"\",\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude\r\n      })     \r\n  })\r\n}\r\n  \r\n    return (\r\n        <div style={{ height: '100vh', width: '100%' }}>\r\n           {state.mapsApiLoaded && <SearchBox map={state.mapInstance} mapsapi={state.mapsapi} placeholder ={PropTypes.string} onPlacesChanged = {PropTypes.func} location = {location} setLocation = {setLocation} />}\r\n          <GoogleMap \r\n            bootstrapURLKeys={{\r\n              key: API_KEY,\r\n              language: 'he',\r\n              libraries: 'places'\r\n            }}\r\n            defaultCenter={defaultProps.center}\r\n            defaultZoom={defaultProps.zoom}\r\n            center = {location}\r\n            options={getMapOptions}\r\n          onClick={_onClick}\r\n          yesIWantToUseGoogleMapApiInternals\r\n            onGoogleApiLoaded={({ map, maps }) => {\r\n              apiLoaded(map, maps);\r\n            }} >\r\n            {props.markers}\r\n            <script type=\"text/javascript\" src=\"https://maps.google.com/maps/api/js?libraries=places&sensor=false\"></script>\r\n            {/* <Marker\r\n            lat={location.lat}\r\n            lng={location.lng}\r\n            name=\"My Marker\"\r\n            color=\"blue\"\r\n          /> */}\r\n           \r\n          </GoogleMap>\r\n                    \r\n\r\n\r\n        </div>  \r\n      );\r\n}) \r\nexport default Map\r\n","\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { cordi } from '../App';\r\nimport {\r\n    makeStyles,\r\n    StylesProvider,\r\n    ThemeProvider,\r\n  } from \"@material-ui/core/styles\";\r\nimport { Button, Icon, Input, InputLabel, NativeSelect, TextField } from '@material-ui/core';\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport axios from 'axios'\r\n\r\ninterface IProps {\r\n    cordinates: cordi\r\n    setShow: any\r\n    form: any\r\n    setForm: any\r\n    handleSubmit: any\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Form = React.memo<IProps>((props)=>{\r\n  \r\n  \r\n  const handleAddress = (address:string) => {\r\n    props.setForm({...props.form, address:address})\r\n  }\r\n\r\n  const handleLatLng = async (address: string) => {\r\n    const results = await geocodeByAddress(address);\r\n    const latLong = await getLatLng(results[0]);\r\n    props.setForm({...props.form, address: address, lat:latLong.lat, lng: latLong.lng})\r\n  } \r\n\r\n  const handleDateHour = (event: any) => {\r\n    \r\n    props.setForm({...props.form, date: event.target.value})\r\n  }\r\n\r\n  const handleAnimal = (event: any) => {\r\n    \r\n    props.setForm({...props.form, animal: event.target.value})\r\n  }\r\n\r\n  const handlenumOfAnimals = (event: any) => {\r\n    \r\n    props.setForm({...props.form, numOfAnimals: event.target.value})\r\n  }\r\n\r\n  const handleTypeOfEvent = (event: any) => {\r\n    console.log(\"this is event: \" ,event.target.value)\r\n    props.setForm({...props.form, typeOfEvent: event.target.value})\r\n  }\r\n\r\n  const handlePerson = (event: any) => {\r\n    \r\n    props.setForm({...props.form, nameOfPerson: event.target.value})\r\n  }\r\n\r\n  const handlePhone = (event: any) => {\r\n    const regex = /^0(5[^7]|[2-4]|[8-9]|7[0-9])[0-9]{7}$/;\r\n    if (regex.test(event.target.value)){\r\n      props.setForm({...props.form, phone: event.target.value})\r\n    }   \r\n  }\r\n\r\n  const handleFeederName = (event: any) => {\r\n    props.setForm({...props.form, feederName: event.target.value})\r\n  }\r\n\r\n  \r\n  const handleFeederPhone = (event: any) => {\r\n    props.setForm({...props.form, feederPhone: event.target.value})\r\n  }\r\n\r\n  \r\n  const handleSterlized = (event: any) => {\r\n    props.setForm({...props.form, sterlizedCats: event.target.value})\r\n  }\r\n\r\n  const handleUnsterlized = (event: any) => {\r\n    props.setForm({...props.form, unsterlizedCats: event.target.value})\r\n  }\r\n\r\n  const eventsForAnimals = (animal: string) => {\r\n    switch (animal){\r\n      case \"Cat\" :\r\n        return (<NativeSelect id=\"select\" onChange = {handleTypeOfEvent}>\r\n                  <option></option>          \r\n                  <option value=\"Feeded cats\">Feeded cats</option>\r\n                  <option value=\"None Feeded cats\">None Feeded cats</option>\r\n                  <option value=\"Giving Birth\">Giving Birth</option>\r\n                </NativeSelect>);\r\n      case \"Dog\" :\r\n        return (<NativeSelect id=\"select\" onChange = {handleTypeOfEvent}>\r\n                  <option></option>\r\n                  <option value=\"Wondering dog without owner\">Wondering dog without owner</option>\r\n                  <option value=\"Dog not on a leash with owner\">Dog not on a leash with owner</option>\r\n                  <option value=\"Wondering and aggressive dog\">Wondering and aggressive dog</option>\r\n                  \r\n                </NativeSelect>);\r\n      case \"Fox\" :\r\n        return (<NativeSelect id=\"select\" onChange = {handleTypeOfEvent}>\r\n                  <option></option>\r\n                  <option value=\"Seen from a distance\">Seen from a distance</option>\r\n                  <option value=\"Seen with puppies\">Seen with puppies</option>\r\n                  <option value=\"Seen and came closer\">Seen and came closer</option>\r\n                  <option value=\"Seen aggressive/attacking\">Seen aggressive/attacking</option>\r\n                </NativeSelect>);\r\n      case \"Jackle\" :\r\n        return (<NativeSelect id=\"select\" onChange = {handleTypeOfEvent}>\r\n                  <option></option>\r\n                  <option value=\"Seen from a distance\">Seen from a distance</option>\r\n                  <option value=\"Seen with puppies\">Seen with puppies</option>\r\n                  <option value=\"Seen and came closer\">Seen and came closer</option>\r\n                  <option value=\"Seen aggressive/attacking\">Seen aggressive/attacking</option>\r\n                </NativeSelect>); \r\n                                    \r\n    }\r\n    \r\n\r\n  }\r\n\r\n  const addedForCats = (animal: string) => {\r\n    if (animal === \"Cat\") {\r\n      return (<div>\r\n                <InputLabel htmlFor=\"input\">Name of feeder:</InputLabel>\r\n                <Input placeholder=\"name\" inputProps={{ 'aria-label': 'description' }} onChange={handleFeederName} /> \r\n                <InputLabel htmlFor=\"input\">Phone of feeder:</InputLabel>\r\n                <Input placeholder=\"name\" inputProps={{ 'aria-label': 'description' }} onChange={handleFeederPhone} />\r\n                <InputLabel htmlFor=\"number\">Number of sterilized cats:</InputLabel>            \r\n                <input type=\"number\" min=\"0\" onChange={handleSterlized}></input>\r\n                <InputLabel htmlFor=\"number\">Number of unsterilized cats:</InputLabel>            \r\n                <input type=\"number\" min=\"0\" onChange={handleUnsterlized}></input>\r\n\r\n              </div>)\r\n    }\r\n  }\r\n\r\n\r\n\r\n \r\n  return (<form onSubmit = {props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                <TextField\r\n                  onChange = { handleDateHour}\r\n                  id=\"date\"\r\n                  label=\"Date and time of event:\"\r\n                  type=\"datetime-local\"\r\n                  defaultValue={props.form.date}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                />\r\n                </div>\r\n                <div>\r\n                  <label>\r\n                    address:\r\n                  </label>\r\n                  <PlacesAutocomplete\r\n                  value={props.form.address}\r\n                  onChange={handleAddress}\r\n                  onSelect={handleLatLng}\r\n                  >\r\n                    {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                  <div>\r\n                  <input\r\n                    {...getInputProps({\r\n                      placeholder: 'Search Places ...',\r\n                      className: 'location-search-input',\r\n                    })}\r\n                  />\r\n                  <div className=\"autocomplete-dropdown-container\">\r\n                    {loading && <div>Loading...</div>}\r\n                    {suggestions.map(suggestion => {\r\n                      const className = suggestion.active\r\n                        ? 'suggestion-item--active'\r\n                        : 'suggestion-item';\r\n                      // inline style for demonstration purpose\r\n                      const style = suggestion.active\r\n                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                      return (\r\n                        <div\r\n                          {...getSuggestionItemProps(suggestion, {\r\n                            className,\r\n                            style,\r\n                          })}\r\n                        >\r\n                          <span>{suggestion.description}</span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n            )}\r\n          </PlacesAutocomplete>\r\n                \r\n        </div>\r\n          <div>\r\n            <InputLabel htmlFor=\"input\">Insert name:</InputLabel>\r\n            <Input placeholder=\"name\" inputProps={{ 'aria-label': 'description' }} onChange={handlePerson} /> \r\n          </div>\r\n          <div>\r\n          <InputLabel htmlFor=\"input\">Insert phone number:</InputLabel>\r\n            <Input inputProps={{ 'aria-label': 'description' }} onChange={handlePhone} /> \r\n          </div>\r\n          <div>\r\n            \r\n            <InputLabel htmlFor=\"select\">Type of animal:</InputLabel>\r\n              <NativeSelect id=\"select\" onChange = {handleAnimal}>\r\n                <option value=\"Cat\">Cat</option>\r\n                <option value=\"Fox\">Fox</option>\r\n                <option value=\"Dog\">Dog</option>\r\n                <option value=\"Jackle\">Jackle</option>\r\n              </NativeSelect>\r\n              <InputLabel htmlFor=\"number\">Number of animals</InputLabel>            \r\n              <input type=\"number\" min=\"0\" onChange={handlenumOfAnimals}></input>\r\n            <div>\r\n            <InputLabel htmlFor=\"select\">Type of event:</InputLabel>\r\n              {eventsForAnimals(props.form.animal)}          \r\n            </div>  \r\n            {addedForCats(props.form.animal)}\r\n          </div>  \r\n              <div>\r\n                  <Button variant=\"contained\" onClick={()=>props.setShow(false)}>cancle</Button>\r\n              </div>\r\n              <div>\r\n              <Button\r\n        variant=\"contained\"\r\n        type = \"submit\"\r\n        color=\"primary\"\r\n        // className={classes.button}\r\n        endIcon={<Icon>send</Icon>}\r\n      >\r\n        Submit\r\n      </Button>\r\n              </div>\r\n            </div>\r\n          </form>)\r\n  })\r\n\r\n\r\nexport default Form\r\n","import React from 'react';\r\nimport { Button, InputLabel, NativeSelect, TextField } from '@material-ui/core';\r\ninterface IProps  {\r\n    animalFilter: string\r\n    setAnimalFilter: any\r\n    eventFilter: string\r\n    setEventFilter: any\r\n    startDateFilter: Date | undefined\r\n    setStartDateFilter: any\r\n    endDateFilter: Date | undefined\r\n    setEndDateFilter: any\r\n    setUseFilter: any\r\n  }\r\n\r\n\r\nconst Filter = React.memo<IProps>((props) =>{\r\n    const returnNormal = () =>{\r\n      props.setUseFilter(false)\r\n      props.setAnimalFilter(\"\")\r\n      props.setEventFilter(\"\")\r\n      props.setStartDateFilter(undefined)\r\n      props.setEndDateFilter(undefined)\r\n    }\r\n    const eventsForAnimals = (animal: string) => {\r\n        switch (animal){\r\n          case \"Cat\" :\r\n            return (<NativeSelect id=\"select\" onChange = {(event) => props.setEventFilter(event.target.value)}>\r\n                      <option value=\"\"></option>\r\n                      <option value=\"Feeded cats\">Feeded cats</option>\r\n                      <option value=\"None Feeded cats\">None Feeded cats</option>\r\n                      <option value=\"Giving Birth\">Giving Birth</option>\r\n                    </NativeSelect>);\r\n          case \"Dog\" :\r\n            return (<NativeSelect id=\"select\" onChange = {(event) => props.setEventFilter(event.target.value)}>\r\n                      <option value=\"\"></option>\r\n                      <option value=\"Wondering dog without owner\">Wondering dog without owner</option>\r\n                      <option value=\"Dog not on a leash with owner\">Dog not on a leash with owner</option>\r\n                      <option value=\"Wondering and aggressive dog\">Wondering and aggressive dog</option>\r\n                      \r\n                    </NativeSelect>);\r\n          case \"Fox\" :\r\n            return (<NativeSelect id=\"select\" onChange = {(event) => props.setEventFilter(event.target.value)}>\r\n                      <option value=\"\"></option>\r\n                      <option value=\"Seen from a distance\">Seen from a distance</option>\r\n                      <option value=\"Seen with puppies\">Seen with puppies</option>\r\n                      <option value=\"Seen and came closer\">Seen and came closer</option>\r\n                      <option value=\"Seen aggressive/attacking\">Seen aggressive/attacking</option>\r\n                    </NativeSelect>);\r\n          case \"Jackle\" :\r\n            return (<NativeSelect id=\"select\" onChange = {(event) => props.setEventFilter(event.target.value)}>\r\n                      <option value=\"\"></option>\r\n                      <option value=\"Seen from a distance\">Seen from a distance</option>\r\n                      <option value=\"Seen with puppies\">Seen with puppies</option>\r\n                      <option value=\"Seen and came closer\">Seen and came closer</option>\r\n                      <option value=\"Seen aggressive/attacking\">Seen aggressive/attacking</option>\r\n                    </NativeSelect>);\r\n          case \"\" :\r\n            return (<NativeSelect id=\"select\" onChange = {(event) => props.setEventFilter(event.target.value)}>\r\n                      <option value=\"\"></option>\r\n                    </NativeSelect>\r\n\r\n            )                              \r\n        }   \r\n      }\r\n\r\n\r\n    return (\r\n    <div>\r\n        <InputLabel htmlFor=\"select\">Type of animal:</InputLabel>\r\n        <NativeSelect id=\"select\" value={props.animalFilter} onChange = {(event:any)=> props.setAnimalFilter(event.target.value)}>\r\n            <option value=\"\"></option>\r\n            <option value=\"Cat\">Cat</option>\r\n            <option value=\"Fox\">Fox</option>\r\n            <option value=\"Dog\">Dog</option>\r\n            <option value=\"Jackle\">Jackle</option>\r\n        </NativeSelect>\r\n\r\n        <InputLabel htmlFor=\"select\">Type of event:</InputLabel>\r\n        {eventsForAnimals(props.animalFilter)} \r\n        \r\n        <TextField\r\n            onChange = {(event:any)=> props.setStartDateFilter(event.target.value)}\r\n            id=\"date\"\r\n            label=\"Start date:\"\r\n            type=\"datetime-local\"\r\n            //defaultValue={new Date()}\r\n            value={props.startDateFilter? props.startDateFilter: \"yyyy-mm-dd\"}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n        />\r\n        <TextField\r\n            onChange = {(event:any)=> props.setEndDateFilter(event.target.value)}\r\n            id=\"date\"\r\n            label=\"End date:\"\r\n            type=\"datetime-local\"\r\n            //defaultValue={new Date()}\r\n            value={props.endDateFilter? props.startDateFilter: \"yyyy-mm-dd\"}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n        />\r\n        <Button variant=\"contained\" onClick={()=>props.setUseFilter(true)}>Filter</Button>\r\n        <Button variant=\"contained\" onClick={returnNormal}>Unfilter</Button>\r\n              \r\n    </div>\r\n    )\r\n})\r\n\r\nexport default Filter","import axios from 'axios'\r\n\r\n\r\n\r\nconst url = \"/api/forms\"\r\n\r\n\r\nconst getAll = () =>\r\n    axios.get(`${url}`).then((response)=>response.data)\r\n\r\n\r\nconst addEvent = (event: any) =>\r\n    axios.post(url, event).then((response)=>response.data)\r\n\r\n\r\nexport default {getAll, addEvent}","\r\nimport React from 'react';\r\nimport './Marker.css';\r\n\r\nconst Marker = (props: any) => {\r\n    const { color, name, id } = props;\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"pin bounce\"\r\n          style={{ backgroundColor: color, cursor: 'pointer' }}\r\n          title={name}\r\n        />\r\n        <div className=\"pulse\" />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default Marker;","import React, { useState, useEffect } from 'react';\r\nimport Map from \"./components/Map\";\r\nimport Form from \"./components/Form\"\r\nimport { Button } from '@material-ui/core';\r\nimport axios from 'axios'\r\nimport Filter from './components/Filter'\r\nimport { getAllByAltText } from '@testing-library/react';\r\nimport service from './components/axios'\r\nimport Marker from './components/Marker';\r\n\r\n\r\nexport interface cordi{\r\n    lat: number | undefined\r\n    lng: number | undefined\r\n}\r\n\r\n// export interface Fform {\r\n//     address: string\r\n//     date: Date\r\n//     animal: string\r\n//     NumOfAnimals: number\r\n//     typeOfEvent: string\r\n//     nameOfperson: string\r\n//     phone: string\r\n//     lat: number\r\n//     lng: number\r\n//     \r\n// }\r\n\r\nconst App = React.memo(()=>{\r\n    const [form, setForm] = useState({address:\"\", date: new Date(), animal: \"Cat\", numOfAnimals: 0, typeOfEvent: \"\",\r\n                                    nameOfPerson: \"\", phone: \"\", lat: 0, lng: 0, feederName: \"\", feederPhone: \"\", sterlizedCats: 0, unsterlizedCats: 0 })\r\n    const [events, setEvents] = useState<object[]>([])\r\n    const [show, setShow] = useState<boolean>(false)\r\n    const [markers, setMarkers] = useState<object[]>([])  \r\n    const [filteredMarkers, setFilteredMarkers] = useState<object[]>([])\r\n    const [cordinates, setCordinates] = useState<cordi>({lat: undefined, lng: undefined})\r\n    const [animalFilter, setAnimalFilter] = useState<string>(\"\")\r\n    const [eventFilter, setEventFilter] = useState<string>(\"\")\r\n    const [startDateFilter, setStartDateFilter] = useState<Date>()\r\n    const [endDateFilter, setEndDateFilter] = useState<Date>()\r\n    const [useFilter, setUseFilter] = useState<boolean>(false)\r\n\r\n    \r\n    const getColorByAnimalType = (AnimalType: string) => {\r\n        switch (AnimalType) {\r\n          case \"Cat\":\r\n            return 'yellow';\r\n          case \"Dog\":\r\n            return 'blue';\r\n          case \"Fox\":\r\n            return 'red';\r\n          case \"Jackal\":  \r\n            return 'green';\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('effect')\r\n        service.getAll().then((forms) => setMarkers(forms.map((form: any)=> <Marker lat={form.lat}\r\n        lng={form.lng}\r\n        name={`${form.animal}\\n ${form.typeOfEvent}\\n ${form.numOfAnimals}\\n ${form.date}\\n ${form.nameOfPerson}\\n ${form.phone}\\n\r\n                ${form.animal === `Cat` ? `feeder: ` + form.feederName + `\\n` + `feeder phone: ` + form.feederPhone + `\\n` +\r\n                  `sterlized cats: ` + form.sterlizedCats + `\\n` + `unsterlized cats: ` + form.unsterlizedCats +`\\n` : \"\"}  ${form.address}`}\r\n        color={getColorByAnimalType(form.animal)}/>)))\r\n      }, [])\r\n    \r\n    const handleSubmit = (event: any) => {\r\n        event.preventDefault()\r\n        console.log(\"im in handle1!!!!!!!!!!!\")\r\n        service.addEvent(form).then((event) => {setMarkers(markers.concat( <Marker lat={form.lat}\r\n          lng={form.lng}\r\n          name={`${form.animal}\\n ${form.typeOfEvent}\\n ${form.numOfAnimals}\\n ${form.date}\\n ${form.nameOfPerson}\\n ${form.phone}\\n\r\n                ${form.animal === `Cat` ? `feeder: ${form.feederName}\\nfeeder phone: ${form.feederPhone}\\nsterlized cats: ${form.sterlizedCats}\r\n                \\nunsterlized cats: ${form.unsterlizedCats}\\n` : \"\"}  ${form.address}`}\r\n                  color={getColorByAnimalType(form.animal)}/>)); \r\n                    setShow(false); \r\n                    setForm({address:\"\", date: new Date(), animal: \"Cat\", numOfAnimals: 0, typeOfEvent: \"\",\r\n                    nameOfPerson: \"\", phone: \"\", lat: 0, lng: 0, feederName: \"\", feederPhone: \"\", sterlizedCats: 0, unsterlizedCats: 0 })})\r\n                    .catch((error)=>console.log(error))\r\n    }\r\n    \r\n    if (show){\r\n        return <Form cordinates={cordinates} setShow = {setShow} form={form} setForm= {setForm} handleSubmit = {handleSubmit}/>\r\n    }\r\n    else{\r\n        return (\r\n                <div>\r\n                    <div>\r\n                        <Button variant=\"contained\" onClick={() => setShow(!show)}>Fill a form</Button>\r\n                    </div>\r\n                    <div>\r\n                        <Filter animalFilter={animalFilter} setAnimalFilter={setAnimalFilter} eventFilter={eventFilter}\r\n                        setEventFilter={setEventFilter} startDateFilter={startDateFilter} setStartDateFilter={setStartDateFilter} \r\n                        endDateFilter={endDateFilter} setEndDateFilter={setEndDateFilter} setUseFilter={setUseFilter}/>\r\n                    </div>\r\n                    <div>\r\n                    <Map events={events} toShow={setShow} markers={markers} setMarkers={setMarkers} setCordinates={setCordinates} useFilter={useFilter}\r\n                         animalFilter={animalFilter} eventFilter={eventFilter} startDateFilter={startDateFilter} endDateFilter={endDateFilter}/>\r\n                    </div>\r\n                </div>    )\r\n    }})\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}